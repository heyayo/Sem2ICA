cmake_minimum_required(VERSION 3.0.0)
project(DXGL3D VERSION 1.0.0)

set(CMAKE_EXPORT_COMPILE_COMMANDS 1)
if (UNIX)
set(CMAKE_EXE_LINKER_FLAGS "-lGL -lGLU -lGLEW -lglfw")
endif (UNIX)
if (WIN32)
add_definitions(-DGLEW_STATIC)
set(CMAKE_GENERATOR_PLATFORM x64)
find_package(OpenGL REQUIRED)
endif (WIN32)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR})

file(GLOB COMMON Common/*)
set(SOURCE Application.cpp main.cpp Mesh.cpp "Input.cpp" Scene1.cpp Scene2.cpp newCamera.cpp AACam.cpp shader.cpp MeshBuilder.cpp MatrixStack.cpp ICA.cpp)

add_library(CommonLib ${COMMON})
add_executable(GL3D ${SOURCE})

target_include_directories(GL3D PUBLIC ${CMAKE_SOURCE_DIR}/Common)
target_include_directories(GL3D PUBLIC ${CMAKE_SOURCE_DIR}/include/)
target_include_directories(GL3D PUBLIC ${CMAKE_SOURCE_DIR}/glm)
#target_link_libraries(GL3D GL GLU GLEW glfw)
target_link_libraries(GL3D PUBLIC CommonLib)
if (WIN32)
	target_link_libraries(GL3D PUBLIC ${CMAKE_SOURCE_DIR}/lib/windows/glew32s.lib)
	target_link_libraries(GL3D PUBLIC ${CMAKE_SOURCE_DIR}/lib/windows/glfw3.lib)
	target_link_libraries(GL3D PUBLIC ${OPENGL_LIBRARIES})
endif (WIN32)
if (UNIX)
	target_link_libraries(GL3D PUBLIC ${CMAKE_SOURCE_DIR}/lib/linux/libGLEW.a)
	target_link_libraries(GL3D PUBLIC ${CMAKE_SOURCE_DIR}/lib/linux/libglfw3.a)
endif (UNIX)

